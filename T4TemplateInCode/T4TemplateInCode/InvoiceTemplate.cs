// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4TemplateInCode
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class InvoiceTemplate : InvoiceTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"

<html>
	<head>
		<meta charset=""utf-8"">
		<title>Invoice</title>
		<link rel=""stylesheet"" href=""style.css"">
		<link rel=""license"" href=""https://www.opensource.org/licenses/mit-license/"">
		<script src=""script.js""></script>
	</head>
	<body>
		<header>
			<h1>Invoice</h1>
			<address contenteditable>
				<p>");
            
            #line 20 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Customer.Name));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t<p>");
            
            #line 21 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Customer.Address));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t<p>");
            
            #line 22 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Customer.Phone));
            
            #line default
            #line hidden
            this.Write(@"</p>
			</address>
			<span><img alt="""" src=""http://www.jonathantneal.com/examples/invoice/logo.png""><input type=""file"" accept=""image/*""></span>
		</header>
		<article>
			<h1>Recipient</h1>
			<address contenteditable>
				<p>Some Company<br>c/o Some Guy</p>
			</address>
			<table class=""meta"">
				<tr>
					<th><span contenteditable>Invoice #</span></th>
					<td><span contenteditable>");
            
            #line 34 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Number));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th><span contenteditable>Date</span></th" +
                    ">\r\n\t\t\t\t\t<td><span contenteditable>");
            
            #line 38 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Date));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th><span contenteditable>Amount Due</spa" +
                    "n></th>\r\n\t\t\t\t\t<td><span id=\"prefix\" contenteditable>$</span><span>");
            
            #line 42 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Total));
            
            #line default
            #line hidden
            this.Write(@"</span></td>
				</tr>
			</table>
			<table class=""inventory"">
				<thead>
					<tr>
						<th><span contenteditable>Item</span></th>
						<th><span contenteditable>Description</span></th>
						<th><span contenteditable>Rate</span></th>
						<th><span contenteditable>Quantity</span></th>
						<th><span contenteditable>Price</span></th>
					</tr>
				</thead>
				<tbody>

				");
            
            #line 57 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
 foreach (InvoiceLine line in Invoice.Lines)   
				{ 
            
            #line default
            #line hidden
            this.Write("  \r\n\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td><a class=\"cut\">-</a><span contenteditable>");
            
            #line 61 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line.Code));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t\t\t<td><span contenteditable>");
            
            #line 62 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line.Description));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t\t\t<td><span data-prefix>$</span><span contenteditable>");
            
            #line 63 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line.Amount));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t\t\t<td><span contenteditable>");
            
            #line 64 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line.Quantity));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t\t\t<td><span data-prefix>$</span><span>");
            
            #line 65 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line.Total));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t\t");
            
            #line 68 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<a class=\"add\">+</a>\r\n\t\t\t<table class=\"balance\">\r" +
                    "\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th><span contenteditable>Total</span></th>\r\n\t\t\t\t\t<td><span data" +
                    "-prefix>$</span><span>");
            
            #line 76 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Total));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th><span contenteditable>Amount Paid</sp" +
                    "an></th>\r\n\t\t\t\t\t<td><span data-prefix>$</span><span contenteditable>");
            
            #line 80 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.TotalPaid));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th><span contenteditable>Balance Due</sp" +
                    "an></th>\r\n\t\t\t\t\t<td><span data-prefix>$</span><span>");
            
            #line 84 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.Balance));
            
            #line default
            #line hidden
            this.Write("</span></td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</article>\r\n\t\t<aside>\r\n\t\t\t<h1><span conte" +
                    "nteditable>Additional Notes</span></h1>\r\n\t\t\t<div contenteditable>\r\n\t\t\t\t");
            
            #line 91 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
 if(Invoice.Customer.CustomerType == CustomerType.Vip){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<p>");
            
            #line 92 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Invoice.ExtraMessage));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t");
            
            #line 93 "E:\Rahman\Projects\T4TemplateByCode\T4TemplateInCode\T4TemplateInCode\InvoiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</div>\r\n\t\t</aside>\r\n\t</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class InvoiceTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
